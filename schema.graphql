#
# Account
#

type Account @entity {
  id: ID!
  tradingVolumeUSD: BigInt!
  tradingVolumeNative: BigInt!
  tvlUSD: BigInt!
  tvlNative: BigInt!
  balances: [TokenBalance!] @derivedFrom(field: "account")
  swaps: [TokenSwap!] @derivedFrom(field: "account")
}

#
# Block
#

type Block @entity {
  id: ID!
  height: Int!
  timestamp: Timestamp!
}

#
# Token
#

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigInt!
  circulatingSupply: BigInt!
  latestPriceUSD: BigInt!
  latestPriceNative: BigInt!
  tvl: BigInt!
}

type TokenBalance @entity {
  id: ID!
  token: Token!
  account: Account!
  amount: BigInt!
}

type TokenPrice @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  priceUSD: BigInt!
  priceNative: BigInt!
}

type TokenPriceAggregate @aggregation(intervals: ["hour", "day"], source: "TokenPrice") {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  priceUSD: BigInt! @aggregate(fn: "last", arg: "priceUSD")
  priceNative: BigInt! @aggregate(fn: "last", arg: "priceNative")
}

#
# DEX
#

type DEX @entity {
  id: ID! # factory address
  name: String!
  totalVolumeUSD: BigInt!
  totalVolumeNative: BigInt!
  tvlUSD: BigInt!
  tvlNative: BigInt!
  pairs: [TokenPair!] @derivedFrom(field: "exchange")
}

#
# TokenPair
#

type TokenPair @entity {
  id: ID!
  token0: Token!
  token1: Token!
  fee: BigInt
  exchange: DEX!
  pool: String!
  tvl0: BigInt!
  tvl1: BigInt!
  block: Block!
  createdAtTxnId: String!
}

type TokenPairVolumeAggregate @aggregation(intervals: ["hour", "day"], source: "TokenSwap") {
  id: Int8!
  timestamp: Timestamp!
  pair: TokenPair!
  volumeUSD: BigInt! @aggregate(fn: "sum", arg: "amountUSD")
  volumeNative: BigInt! @aggregate(fn: "sum", arg: "amountNative")
}

#
# Token DEX activities
#

type TokenSwap @entity(timeseries: true) {
  id: Int8! # auto-increment
	timestamp: Timestamp! # auto-set to block timestamp

  pair: TokenPair!
  token0Amount: BigInt!
  token1Amount: BigInt!
  zeroForOne: Boolean!
  account: Account!
  amountUSD: BigInt!
  amountNative: BigInt!
  exchange: DEX!
}

type TokenAddLiquidity @entity {
  id: ID!
  pair: TokenPair!
  token0Amount: BigInt!
  token1Amount: BigInt!
	# only for V3/V4, otherwise 0
	tickLower: Int
	tickUpper: Int
  account: Account!
}

type TokenRemoveLiquidity @entity {
  id: ID!
  pair: TokenPair!
  token0Amount: BigInt!
  token1Amount: BigInt!
	# only for V3/V4, otherwise 0
	tickLower: Int
	tickUpper: Int
  account: Account!
}

type TokenPairEvent @entity {
  id: ID! # txnId + txnIndex + eventIndex
  block: Block!
  txnId: String!
  txnIndex: Int!
  eventIndex: Int!
  account: Account!
  pair: TokenPair!
  eventType: String! # creation -> Pair created; swap -> Swap; join -> Add liquidity; exit -> Remove liquidity
  amount0: BigInt # only for joins and exits
  amount1: BigInt # only for joins and exits
  amount0In: BigInt # only for swaps
  amount1Out: BigInt # only for swaps
  amount0Out: BigInt # only for swaps
  amount1In: BigInt # only for swaps
  reserve0: BigInt # only for joins, exists and swaps
  reserve1: BigInt # only for joins, exists and swaps
}
