#
# Account
#

type Account @entity {
  id: ID!
  balances: [TokenBalance!] @derivedFrom(field: "account")
}

#
# Block
#

type Block @entity {
  id: ID!
  height: Int!
  timestamp: Timestamp!
}

#
# Token
#

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigInt!
  circulatingSupply: BigInt!
  balances: [TokenBalance!] @derivedFrom(field: "token")
}

type TokenBalance @entity {
  id: ID!
  token: Token!
  account: Account!
  amount: BigInt!
}

#
# DEX
#

type DEX @entity {
  id: ID! # factory address
  name: String!
  pairs: [TokenPair!] @derivedFrom(field: "exchange")
}

#
# TokenPair
#

type TokenPair @entity {
  id: ID!
  token0: Token!
  token1: Token!
  fee: BigInt
  exchange: DEX!
  pool: String!
  block: Block!
  createdAtTxnId: String!
}

#
# Token DEX activities
#

type TokenAddLiquidity @entity {
  id: ID!
  pair: TokenPair!
  token0Amount: BigInt!
  token1Amount: BigInt!
	# only for V3/V4, otherwise 0
	tickLower: Int
	tickUpper: Int
  account: Account!
}

type TokenRemoveLiquidity @entity {
  id: ID!
  pair: TokenPair!
  token0Amount: BigInt!
  token1Amount: BigInt!
	# only for V3/V4, otherwise 0
	tickLower: Int
	tickUpper: Int
  account: Account!
}

type TokenPairEvent @entity {
  id: ID! # txnId + txnIndex + eventIndex
  block: Block!
  txnId: String!
  txnIndex: Int!
  eventIndex: Int!
  account: Account!
  pair: TokenPair!
  eventType: String! # creation -> Pair created; swap -> Swap; join -> Add liquidity; exit -> Remove liquidity
  amount0: BigInt # only for joins and exits
  amount1: BigInt # only for joins and exits
  amount0In: BigInt # only for swaps
  amount1Out: BigInt # only for swaps
  amount0Out: BigInt # only for swaps
  amount1In: BigInt # only for swaps
  reserve0: BigInt # only for joins, exists and swaps
  reserve1: BigInt # only for joins, exists and swaps
}
